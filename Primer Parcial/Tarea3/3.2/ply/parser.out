Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    EQUAL_THAN

Grammar

Rule 0     S' -> little_duck
Rule 1     little_duck -> program
Rule 2     little_duck -> empty
Rule 3     program -> PROGRAM ID COLON block_var bloque
Rule 4     block_var -> vars
Rule 5     block_var -> bloque
Rule 6     block_var -> empty
Rule 7     vars -> VAR for_id
Rule 8     for_id -> ID coma
Rule 9     for_id -> ID colon
Rule 10    coma -> COMA for_id
Rule 11    colon -> COLON tipo SEMICOLON var_end
Rule 12    var_end -> for_id
Rule 13    var_end -> bloque
Rule 14    bloque -> LEFT_CURLY_BRACKET info
Rule 15    info -> RIGHT_CURLY_BRACKET
Rule 16    info -> estatuto info
Rule 17    tipo -> INT
Rule 18    tipo -> FLOAT
Rule 19    estatuto -> asignacion
Rule 20    estatuto -> condicion
Rule 21    estatuto -> escritura
Rule 22    asignacion -> ID EQUALS expresion SEMICOLON
Rule 23    condicion -> IF LEFT_PARENTHESIS expresion RIGHT_PARENTHESIS bloque cond_else
Rule 24    cond_else -> SEMICOLON
Rule 25    cond_else -> ELSE bloque SEMICOLON
Rule 26    escritura -> PRINT LEFT_PARENTHESIS escritura RIGHT_PARENTHESIS SEMICOLON
Rule 27    escritura -> expresion
Rule 28    escritura -> STRING
Rule 29    expresion -> exp comparador exp
Rule 30    comparador -> BIGGER_THAN
Rule 31    comparador -> LESS_THAN
Rule 32    comparador -> OTHER_THAN
Rule 33    exp -> termino exp
Rule 34    exp -> PLUS
Rule 35    exp -> MINUS
Rule 36    termino -> factor mult_div
Rule 37    mult_div -> MULTIPLY
Rule 38    mult_div -> DIVIDE
Rule 39    factor -> for_expr
Rule 40    factor -> for_op
Rule 41    factor -> varcte
Rule 42    for_expr -> LEFT_PARENTHESIS expresion RIGHT_PARENTHESIS
Rule 43    for_op -> PLUS varcte
Rule 44    for_op -> MINUS varcte
Rule 45    varcte -> ID
Rule 46    varcte -> INT
Rule 47    varcte -> FLOAT
Rule 48    empty -> <empty>

Terminals, with rules where they appear

BIGGER_THAN          : 30
COLON                : 3 11
COMA                 : 10
DIVIDE               : 38
ELSE                 : 25
EQUALS               : 22
EQUAL_THAN           : 
FLOAT                : 18 47
ID                   : 3 8 9 22 45
IF                   : 23
INT                  : 17 46
LEFT_CURLY_BRACKET   : 14
LEFT_PARENTHESIS     : 23 26 42
LESS_THAN            : 31
MINUS                : 35 44
MULTIPLY             : 37
OTHER_THAN           : 32
PLUS                 : 34 43
PRINT                : 26
PROGRAM              : 3
RIGHT_CURLY_BRACKET  : 15
RIGHT_PARENTHESIS    : 23 26 42
SEMICOLON            : 11 22 24 25 26
STRING               : 28
VAR                  : 7
error                : 

Nonterminals, with rules where they appear

asignacion           : 19
block_var            : 3
bloque               : 3 5 13 23 25
colon                : 9
coma                 : 8
comparador           : 29
cond_else            : 23
condicion            : 20
empty                : 2 6
escritura            : 21 26
estatuto             : 16
exp                  : 29 29 33
expresion            : 22 23 27 42
factor               : 36
for_expr             : 39
for_id               : 7 10 12
for_op               : 40
info                 : 14 16
little_duck          : 0
mult_div             : 36
program              : 1
termino              : 33
tipo                 : 11
var_end              : 11
varcte               : 41 43 44
vars                 : 4

Parsing method: LALR

state 0

    (0) S' -> . little_duck
    (1) little_duck -> . program
    (2) little_duck -> . empty
    (3) program -> . PROGRAM ID COLON block_var bloque
    (48) empty -> .

    PROGRAM         shift and go to state 4
    $end            reduce using rule 48 (empty -> .)

    little_duck                    shift and go to state 1
    program                        shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> little_duck .



state 2

    (1) little_duck -> program .

    $end            reduce using rule 1 (little_duck -> program .)


state 3

    (2) little_duck -> empty .

    $end            reduce using rule 2 (little_duck -> empty .)


state 4

    (3) program -> PROGRAM . ID COLON block_var bloque

    ID              shift and go to state 5


state 5

    (3) program -> PROGRAM ID . COLON block_var bloque

    COLON           shift and go to state 6


state 6

    (3) program -> PROGRAM ID COLON . block_var bloque
    (4) block_var -> . vars
    (5) block_var -> . bloque
    (6) block_var -> . empty
    (7) vars -> . VAR for_id
    (14) bloque -> . LEFT_CURLY_BRACKET info
    (48) empty -> .

  ! shift/reduce conflict for LEFT_CURLY_BRACKET resolved as shift
    VAR             shift and go to state 11
    LEFT_CURLY_BRACKET shift and go to state 12

  ! LEFT_CURLY_BRACKET [ reduce using rule 48 (empty -> .) ]

    block_var                      shift and go to state 7
    bloque                         shift and go to state 8
    vars                           shift and go to state 9
    empty                          shift and go to state 10

state 7

    (3) program -> PROGRAM ID COLON block_var . bloque
    (14) bloque -> . LEFT_CURLY_BRACKET info

    LEFT_CURLY_BRACKET shift and go to state 12

    bloque                         shift and go to state 13

state 8

    (5) block_var -> bloque .

    LEFT_CURLY_BRACKET reduce using rule 5 (block_var -> bloque .)


state 9

    (4) block_var -> vars .

    LEFT_CURLY_BRACKET reduce using rule 4 (block_var -> vars .)


state 10

    (6) block_var -> empty .

    LEFT_CURLY_BRACKET reduce using rule 6 (block_var -> empty .)


state 11

    (7) vars -> VAR . for_id
    (8) for_id -> . ID coma
    (9) for_id -> . ID colon

    ID              shift and go to state 15

    for_id                         shift and go to state 14

state 12

    (14) bloque -> LEFT_CURLY_BRACKET . info
    (15) info -> . RIGHT_CURLY_BRACKET
    (16) info -> . estatuto info
    (19) estatuto -> . asignacion
    (20) estatuto -> . condicion
    (21) estatuto -> . escritura
    (22) asignacion -> . ID EQUALS expresion SEMICOLON
    (23) condicion -> . IF LEFT_PARENTHESIS expresion RIGHT_PARENTHESIS bloque cond_else
    (26) escritura -> . PRINT LEFT_PARENTHESIS escritura RIGHT_PARENTHESIS SEMICOLON
    (27) escritura -> . expresion
    (28) escritura -> . STRING
    (29) expresion -> . exp comparador exp
    (33) exp -> . termino exp
    (34) exp -> . PLUS
    (35) exp -> . MINUS
    (36) termino -> . factor mult_div
    (39) factor -> . for_expr
    (40) factor -> . for_op
    (41) factor -> . varcte
    (42) for_expr -> . LEFT_PARENTHESIS expresion RIGHT_PARENTHESIS
    (43) for_op -> . PLUS varcte
    (44) for_op -> . MINUS varcte
    (45) varcte -> . ID
    (46) varcte -> . INT
    (47) varcte -> . FLOAT

    RIGHT_CURLY_BRACKET shift and go to state 17
    ID              shift and go to state 22
    IF              shift and go to state 24
    PRINT           shift and go to state 26
    STRING          shift and go to state 27
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    LEFT_PARENTHESIS shift and go to state 25
    INT             shift and go to state 36
    FLOAT           shift and go to state 37

    info                           shift and go to state 16
    estatuto                       shift and go to state 18
    asignacion                     shift and go to state 19
    condicion                      shift and go to state 20
    escritura                      shift and go to state 21
    expresion                      shift and go to state 23
    exp                            shift and go to state 28
    termino                        shift and go to state 29
    factor                         shift and go to state 32
    for_expr                       shift and go to state 33
    for_op                         shift and go to state 34
    varcte                         shift and go to state 35

state 13

    (3) program -> PROGRAM ID COLON block_var bloque .

    $end            reduce using rule 3 (program -> PROGRAM ID COLON block_var bloque .)


state 14

    (7) vars -> VAR for_id .

    LEFT_CURLY_BRACKET reduce using rule 7 (vars -> VAR for_id .)


state 15

    (8) for_id -> ID . coma
    (9) for_id -> ID . colon
    (10) coma -> . COMA for_id
    (11) colon -> . COLON tipo SEMICOLON var_end

    COMA            shift and go to state 40
    COLON           shift and go to state 41

    coma                           shift and go to state 38
    colon                          shift and go to state 39

state 16

    (14) bloque -> LEFT_CURLY_BRACKET info .

    LEFT_CURLY_BRACKET reduce using rule 14 (bloque -> LEFT_CURLY_BRACKET info .)
    $end            reduce using rule 14 (bloque -> LEFT_CURLY_BRACKET info .)
    SEMICOLON       reduce using rule 14 (bloque -> LEFT_CURLY_BRACKET info .)
    ELSE            reduce using rule 14 (bloque -> LEFT_CURLY_BRACKET info .)


state 17

    (15) info -> RIGHT_CURLY_BRACKET .

    LEFT_CURLY_BRACKET reduce using rule 15 (info -> RIGHT_CURLY_BRACKET .)
    $end            reduce using rule 15 (info -> RIGHT_CURLY_BRACKET .)
    SEMICOLON       reduce using rule 15 (info -> RIGHT_CURLY_BRACKET .)
    ELSE            reduce using rule 15 (info -> RIGHT_CURLY_BRACKET .)


state 18

    (16) info -> estatuto . info
    (15) info -> . RIGHT_CURLY_BRACKET
    (16) info -> . estatuto info
    (19) estatuto -> . asignacion
    (20) estatuto -> . condicion
    (21) estatuto -> . escritura
    (22) asignacion -> . ID EQUALS expresion SEMICOLON
    (23) condicion -> . IF LEFT_PARENTHESIS expresion RIGHT_PARENTHESIS bloque cond_else
    (26) escritura -> . PRINT LEFT_PARENTHESIS escritura RIGHT_PARENTHESIS SEMICOLON
    (27) escritura -> . expresion
    (28) escritura -> . STRING
    (29) expresion -> . exp comparador exp
    (33) exp -> . termino exp
    (34) exp -> . PLUS
    (35) exp -> . MINUS
    (36) termino -> . factor mult_div
    (39) factor -> . for_expr
    (40) factor -> . for_op
    (41) factor -> . varcte
    (42) for_expr -> . LEFT_PARENTHESIS expresion RIGHT_PARENTHESIS
    (43) for_op -> . PLUS varcte
    (44) for_op -> . MINUS varcte
    (45) varcte -> . ID
    (46) varcte -> . INT
    (47) varcte -> . FLOAT

    RIGHT_CURLY_BRACKET shift and go to state 17
    ID              shift and go to state 22
    IF              shift and go to state 24
    PRINT           shift and go to state 26
    STRING          shift and go to state 27
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    LEFT_PARENTHESIS shift and go to state 25
    INT             shift and go to state 36
    FLOAT           shift and go to state 37

    estatuto                       shift and go to state 18
    info                           shift and go to state 42
    asignacion                     shift and go to state 19
    condicion                      shift and go to state 20
    escritura                      shift and go to state 21
    expresion                      shift and go to state 23
    exp                            shift and go to state 28
    termino                        shift and go to state 29
    factor                         shift and go to state 32
    for_expr                       shift and go to state 33
    for_op                         shift and go to state 34
    varcte                         shift and go to state 35

state 19

    (19) estatuto -> asignacion .

    RIGHT_CURLY_BRACKET reduce using rule 19 (estatuto -> asignacion .)
    ID              reduce using rule 19 (estatuto -> asignacion .)
    IF              reduce using rule 19 (estatuto -> asignacion .)
    PRINT           reduce using rule 19 (estatuto -> asignacion .)
    STRING          reduce using rule 19 (estatuto -> asignacion .)
    PLUS            reduce using rule 19 (estatuto -> asignacion .)
    MINUS           reduce using rule 19 (estatuto -> asignacion .)
    LEFT_PARENTHESIS reduce using rule 19 (estatuto -> asignacion .)
    INT             reduce using rule 19 (estatuto -> asignacion .)
    FLOAT           reduce using rule 19 (estatuto -> asignacion .)


state 20

    (20) estatuto -> condicion .

    RIGHT_CURLY_BRACKET reduce using rule 20 (estatuto -> condicion .)
    ID              reduce using rule 20 (estatuto -> condicion .)
    IF              reduce using rule 20 (estatuto -> condicion .)
    PRINT           reduce using rule 20 (estatuto -> condicion .)
    STRING          reduce using rule 20 (estatuto -> condicion .)
    PLUS            reduce using rule 20 (estatuto -> condicion .)
    MINUS           reduce using rule 20 (estatuto -> condicion .)
    LEFT_PARENTHESIS reduce using rule 20 (estatuto -> condicion .)
    INT             reduce using rule 20 (estatuto -> condicion .)
    FLOAT           reduce using rule 20 (estatuto -> condicion .)


state 21

    (21) estatuto -> escritura .

    RIGHT_CURLY_BRACKET reduce using rule 21 (estatuto -> escritura .)
    ID              reduce using rule 21 (estatuto -> escritura .)
    IF              reduce using rule 21 (estatuto -> escritura .)
    PRINT           reduce using rule 21 (estatuto -> escritura .)
    STRING          reduce using rule 21 (estatuto -> escritura .)
    PLUS            reduce using rule 21 (estatuto -> escritura .)
    MINUS           reduce using rule 21 (estatuto -> escritura .)
    LEFT_PARENTHESIS reduce using rule 21 (estatuto -> escritura .)
    INT             reduce using rule 21 (estatuto -> escritura .)
    FLOAT           reduce using rule 21 (estatuto -> escritura .)


state 22

    (22) asignacion -> ID . EQUALS expresion SEMICOLON
    (45) varcte -> ID .

    EQUALS          shift and go to state 43
    MULTIPLY        reduce using rule 45 (varcte -> ID .)
    DIVIDE          reduce using rule 45 (varcte -> ID .)


state 23

    (27) escritura -> expresion .

    RIGHT_CURLY_BRACKET reduce using rule 27 (escritura -> expresion .)
    ID              reduce using rule 27 (escritura -> expresion .)
    IF              reduce using rule 27 (escritura -> expresion .)
    PRINT           reduce using rule 27 (escritura -> expresion .)
    STRING          reduce using rule 27 (escritura -> expresion .)
    PLUS            reduce using rule 27 (escritura -> expresion .)
    MINUS           reduce using rule 27 (escritura -> expresion .)
    LEFT_PARENTHESIS reduce using rule 27 (escritura -> expresion .)
    INT             reduce using rule 27 (escritura -> expresion .)
    FLOAT           reduce using rule 27 (escritura -> expresion .)
    RIGHT_PARENTHESIS reduce using rule 27 (escritura -> expresion .)


state 24

    (23) condicion -> IF . LEFT_PARENTHESIS expresion RIGHT_PARENTHESIS bloque cond_else

    LEFT_PARENTHESIS shift and go to state 44


state 25

    (42) for_expr -> LEFT_PARENTHESIS . expresion RIGHT_PARENTHESIS
    (29) expresion -> . exp comparador exp
    (33) exp -> . termino exp
    (34) exp -> . PLUS
    (35) exp -> . MINUS
    (36) termino -> . factor mult_div
    (39) factor -> . for_expr
    (40) factor -> . for_op
    (41) factor -> . varcte
    (42) for_expr -> . LEFT_PARENTHESIS expresion RIGHT_PARENTHESIS
    (43) for_op -> . PLUS varcte
    (44) for_op -> . MINUS varcte
    (45) varcte -> . ID
    (46) varcte -> . INT
    (47) varcte -> . FLOAT

    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    LEFT_PARENTHESIS shift and go to state 25
    ID              shift and go to state 46
    INT             shift and go to state 36
    FLOAT           shift and go to state 37

    expresion                      shift and go to state 45
    exp                            shift and go to state 28
    termino                        shift and go to state 29
    factor                         shift and go to state 32
    for_expr                       shift and go to state 33
    for_op                         shift and go to state 34
    varcte                         shift and go to state 35

state 26

    (26) escritura -> PRINT . LEFT_PARENTHESIS escritura RIGHT_PARENTHESIS SEMICOLON

    LEFT_PARENTHESIS shift and go to state 47


state 27

    (28) escritura -> STRING .

    RIGHT_CURLY_BRACKET reduce using rule 28 (escritura -> STRING .)
    ID              reduce using rule 28 (escritura -> STRING .)
    IF              reduce using rule 28 (escritura -> STRING .)
    PRINT           reduce using rule 28 (escritura -> STRING .)
    STRING          reduce using rule 28 (escritura -> STRING .)
    PLUS            reduce using rule 28 (escritura -> STRING .)
    MINUS           reduce using rule 28 (escritura -> STRING .)
    LEFT_PARENTHESIS reduce using rule 28 (escritura -> STRING .)
    INT             reduce using rule 28 (escritura -> STRING .)
    FLOAT           reduce using rule 28 (escritura -> STRING .)
    RIGHT_PARENTHESIS reduce using rule 28 (escritura -> STRING .)


state 28

    (29) expresion -> exp . comparador exp
    (30) comparador -> . BIGGER_THAN
    (31) comparador -> . LESS_THAN
    (32) comparador -> . OTHER_THAN

    BIGGER_THAN     shift and go to state 49
    LESS_THAN       shift and go to state 50
    OTHER_THAN      shift and go to state 51

    comparador                     shift and go to state 48

state 29

    (33) exp -> termino . exp
    (33) exp -> . termino exp
    (34) exp -> . PLUS
    (35) exp -> . MINUS
    (36) termino -> . factor mult_div
    (39) factor -> . for_expr
    (40) factor -> . for_op
    (41) factor -> . varcte
    (42) for_expr -> . LEFT_PARENTHESIS expresion RIGHT_PARENTHESIS
    (43) for_op -> . PLUS varcte
    (44) for_op -> . MINUS varcte
    (45) varcte -> . ID
    (46) varcte -> . INT
    (47) varcte -> . FLOAT

    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    LEFT_PARENTHESIS shift and go to state 25
    ID              shift and go to state 46
    INT             shift and go to state 36
    FLOAT           shift and go to state 37

    termino                        shift and go to state 29
    exp                            shift and go to state 52
    factor                         shift and go to state 32
    for_expr                       shift and go to state 33
    for_op                         shift and go to state 34
    varcte                         shift and go to state 35

state 30

    (34) exp -> PLUS .
    (43) for_op -> PLUS . varcte
    (45) varcte -> . ID
    (46) varcte -> . INT
    (47) varcte -> . FLOAT

    BIGGER_THAN     reduce using rule 34 (exp -> PLUS .)
    LESS_THAN       reduce using rule 34 (exp -> PLUS .)
    OTHER_THAN      reduce using rule 34 (exp -> PLUS .)
    RIGHT_CURLY_BRACKET reduce using rule 34 (exp -> PLUS .)
    ID              reduce using rule 34 (exp -> PLUS .)
    IF              reduce using rule 34 (exp -> PLUS .)
    PRINT           reduce using rule 34 (exp -> PLUS .)
    STRING          reduce using rule 34 (exp -> PLUS .)
    PLUS            reduce using rule 34 (exp -> PLUS .)
    MINUS           reduce using rule 34 (exp -> PLUS .)
    LEFT_PARENTHESIS reduce using rule 34 (exp -> PLUS .)
    INT             reduce using rule 34 (exp -> PLUS .)
    FLOAT           reduce using rule 34 (exp -> PLUS .)
    RIGHT_PARENTHESIS reduce using rule 34 (exp -> PLUS .)
    SEMICOLON       reduce using rule 34 (exp -> PLUS .)

  ! ID              [ shift and go to state 46 ]
  ! INT             [ shift and go to state 36 ]
  ! FLOAT           [ shift and go to state 37 ]

    varcte                         shift and go to state 53

state 31

    (35) exp -> MINUS .
    (44) for_op -> MINUS . varcte
    (45) varcte -> . ID
    (46) varcte -> . INT
    (47) varcte -> . FLOAT

    BIGGER_THAN     reduce using rule 35 (exp -> MINUS .)
    LESS_THAN       reduce using rule 35 (exp -> MINUS .)
    OTHER_THAN      reduce using rule 35 (exp -> MINUS .)
    RIGHT_CURLY_BRACKET reduce using rule 35 (exp -> MINUS .)
    ID              reduce using rule 35 (exp -> MINUS .)
    IF              reduce using rule 35 (exp -> MINUS .)
    PRINT           reduce using rule 35 (exp -> MINUS .)
    STRING          reduce using rule 35 (exp -> MINUS .)
    PLUS            reduce using rule 35 (exp -> MINUS .)
    MINUS           reduce using rule 35 (exp -> MINUS .)
    LEFT_PARENTHESIS reduce using rule 35 (exp -> MINUS .)
    INT             reduce using rule 35 (exp -> MINUS .)
    FLOAT           reduce using rule 35 (exp -> MINUS .)
    RIGHT_PARENTHESIS reduce using rule 35 (exp -> MINUS .)
    SEMICOLON       reduce using rule 35 (exp -> MINUS .)

  ! ID              [ shift and go to state 46 ]
  ! INT             [ shift and go to state 36 ]
  ! FLOAT           [ shift and go to state 37 ]

    varcte                         shift and go to state 54

state 32

    (36) termino -> factor . mult_div
    (37) mult_div -> . MULTIPLY
    (38) mult_div -> . DIVIDE

    MULTIPLY        shift and go to state 56
    DIVIDE          shift and go to state 57

    mult_div                       shift and go to state 55

state 33

    (39) factor -> for_expr .

    MULTIPLY        reduce using rule 39 (factor -> for_expr .)
    DIVIDE          reduce using rule 39 (factor -> for_expr .)


state 34

    (40) factor -> for_op .

    MULTIPLY        reduce using rule 40 (factor -> for_op .)
    DIVIDE          reduce using rule 40 (factor -> for_op .)


state 35

    (41) factor -> varcte .

    MULTIPLY        reduce using rule 41 (factor -> varcte .)
    DIVIDE          reduce using rule 41 (factor -> varcte .)


state 36

    (46) varcte -> INT .

    MULTIPLY        reduce using rule 46 (varcte -> INT .)
    DIVIDE          reduce using rule 46 (varcte -> INT .)


state 37

    (47) varcte -> FLOAT .

    MULTIPLY        reduce using rule 47 (varcte -> FLOAT .)
    DIVIDE          reduce using rule 47 (varcte -> FLOAT .)


state 38

    (8) for_id -> ID coma .

    LEFT_CURLY_BRACKET reduce using rule 8 (for_id -> ID coma .)


state 39

    (9) for_id -> ID colon .

    LEFT_CURLY_BRACKET reduce using rule 9 (for_id -> ID colon .)


state 40

    (10) coma -> COMA . for_id
    (8) for_id -> . ID coma
    (9) for_id -> . ID colon

    ID              shift and go to state 15

    for_id                         shift and go to state 58

state 41

    (11) colon -> COLON . tipo SEMICOLON var_end
    (17) tipo -> . INT
    (18) tipo -> . FLOAT

    INT             shift and go to state 60
    FLOAT           shift and go to state 61

    tipo                           shift and go to state 59

state 42

    (16) info -> estatuto info .

    LEFT_CURLY_BRACKET reduce using rule 16 (info -> estatuto info .)
    $end            reduce using rule 16 (info -> estatuto info .)
    SEMICOLON       reduce using rule 16 (info -> estatuto info .)
    ELSE            reduce using rule 16 (info -> estatuto info .)


state 43

    (22) asignacion -> ID EQUALS . expresion SEMICOLON
    (29) expresion -> . exp comparador exp
    (33) exp -> . termino exp
    (34) exp -> . PLUS
    (35) exp -> . MINUS
    (36) termino -> . factor mult_div
    (39) factor -> . for_expr
    (40) factor -> . for_op
    (41) factor -> . varcte
    (42) for_expr -> . LEFT_PARENTHESIS expresion RIGHT_PARENTHESIS
    (43) for_op -> . PLUS varcte
    (44) for_op -> . MINUS varcte
    (45) varcte -> . ID
    (46) varcte -> . INT
    (47) varcte -> . FLOAT

    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    LEFT_PARENTHESIS shift and go to state 25
    ID              shift and go to state 46
    INT             shift and go to state 36
    FLOAT           shift and go to state 37

    expresion                      shift and go to state 62
    exp                            shift and go to state 28
    termino                        shift and go to state 29
    factor                         shift and go to state 32
    for_expr                       shift and go to state 33
    for_op                         shift and go to state 34
    varcte                         shift and go to state 35

state 44

    (23) condicion -> IF LEFT_PARENTHESIS . expresion RIGHT_PARENTHESIS bloque cond_else
    (29) expresion -> . exp comparador exp
    (33) exp -> . termino exp
    (34) exp -> . PLUS
    (35) exp -> . MINUS
    (36) termino -> . factor mult_div
    (39) factor -> . for_expr
    (40) factor -> . for_op
    (41) factor -> . varcte
    (42) for_expr -> . LEFT_PARENTHESIS expresion RIGHT_PARENTHESIS
    (43) for_op -> . PLUS varcte
    (44) for_op -> . MINUS varcte
    (45) varcte -> . ID
    (46) varcte -> . INT
    (47) varcte -> . FLOAT

    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    LEFT_PARENTHESIS shift and go to state 25
    ID              shift and go to state 46
    INT             shift and go to state 36
    FLOAT           shift and go to state 37

    expresion                      shift and go to state 63
    exp                            shift and go to state 28
    termino                        shift and go to state 29
    factor                         shift and go to state 32
    for_expr                       shift and go to state 33
    for_op                         shift and go to state 34
    varcte                         shift and go to state 35

state 45

    (42) for_expr -> LEFT_PARENTHESIS expresion . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 64


state 46

    (45) varcte -> ID .

    MULTIPLY        reduce using rule 45 (varcte -> ID .)
    DIVIDE          reduce using rule 45 (varcte -> ID .)


state 47

    (26) escritura -> PRINT LEFT_PARENTHESIS . escritura RIGHT_PARENTHESIS SEMICOLON
    (26) escritura -> . PRINT LEFT_PARENTHESIS escritura RIGHT_PARENTHESIS SEMICOLON
    (27) escritura -> . expresion
    (28) escritura -> . STRING
    (29) expresion -> . exp comparador exp
    (33) exp -> . termino exp
    (34) exp -> . PLUS
    (35) exp -> . MINUS
    (36) termino -> . factor mult_div
    (39) factor -> . for_expr
    (40) factor -> . for_op
    (41) factor -> . varcte
    (42) for_expr -> . LEFT_PARENTHESIS expresion RIGHT_PARENTHESIS
    (43) for_op -> . PLUS varcte
    (44) for_op -> . MINUS varcte
    (45) varcte -> . ID
    (46) varcte -> . INT
    (47) varcte -> . FLOAT

    PRINT           shift and go to state 26
    STRING          shift and go to state 27
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    LEFT_PARENTHESIS shift and go to state 25
    ID              shift and go to state 46
    INT             shift and go to state 36
    FLOAT           shift and go to state 37

    escritura                      shift and go to state 65
    expresion                      shift and go to state 23
    exp                            shift and go to state 28
    termino                        shift and go to state 29
    factor                         shift and go to state 32
    for_expr                       shift and go to state 33
    for_op                         shift and go to state 34
    varcte                         shift and go to state 35

state 48

    (29) expresion -> exp comparador . exp
    (33) exp -> . termino exp
    (34) exp -> . PLUS
    (35) exp -> . MINUS
    (36) termino -> . factor mult_div
    (39) factor -> . for_expr
    (40) factor -> . for_op
    (41) factor -> . varcte
    (42) for_expr -> . LEFT_PARENTHESIS expresion RIGHT_PARENTHESIS
    (43) for_op -> . PLUS varcte
    (44) for_op -> . MINUS varcte
    (45) varcte -> . ID
    (46) varcte -> . INT
    (47) varcte -> . FLOAT

    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    LEFT_PARENTHESIS shift and go to state 25
    ID              shift and go to state 46
    INT             shift and go to state 36
    FLOAT           shift and go to state 37

    exp                            shift and go to state 66
    termino                        shift and go to state 29
    factor                         shift and go to state 32
    for_expr                       shift and go to state 33
    for_op                         shift and go to state 34
    varcte                         shift and go to state 35

state 49

    (30) comparador -> BIGGER_THAN .

    PLUS            reduce using rule 30 (comparador -> BIGGER_THAN .)
    MINUS           reduce using rule 30 (comparador -> BIGGER_THAN .)
    LEFT_PARENTHESIS reduce using rule 30 (comparador -> BIGGER_THAN .)
    ID              reduce using rule 30 (comparador -> BIGGER_THAN .)
    INT             reduce using rule 30 (comparador -> BIGGER_THAN .)
    FLOAT           reduce using rule 30 (comparador -> BIGGER_THAN .)


state 50

    (31) comparador -> LESS_THAN .

    PLUS            reduce using rule 31 (comparador -> LESS_THAN .)
    MINUS           reduce using rule 31 (comparador -> LESS_THAN .)
    LEFT_PARENTHESIS reduce using rule 31 (comparador -> LESS_THAN .)
    ID              reduce using rule 31 (comparador -> LESS_THAN .)
    INT             reduce using rule 31 (comparador -> LESS_THAN .)
    FLOAT           reduce using rule 31 (comparador -> LESS_THAN .)


state 51

    (32) comparador -> OTHER_THAN .

    PLUS            reduce using rule 32 (comparador -> OTHER_THAN .)
    MINUS           reduce using rule 32 (comparador -> OTHER_THAN .)
    LEFT_PARENTHESIS reduce using rule 32 (comparador -> OTHER_THAN .)
    ID              reduce using rule 32 (comparador -> OTHER_THAN .)
    INT             reduce using rule 32 (comparador -> OTHER_THAN .)
    FLOAT           reduce using rule 32 (comparador -> OTHER_THAN .)


state 52

    (33) exp -> termino exp .

    BIGGER_THAN     reduce using rule 33 (exp -> termino exp .)
    LESS_THAN       reduce using rule 33 (exp -> termino exp .)
    OTHER_THAN      reduce using rule 33 (exp -> termino exp .)
    RIGHT_CURLY_BRACKET reduce using rule 33 (exp -> termino exp .)
    ID              reduce using rule 33 (exp -> termino exp .)
    IF              reduce using rule 33 (exp -> termino exp .)
    PRINT           reduce using rule 33 (exp -> termino exp .)
    STRING          reduce using rule 33 (exp -> termino exp .)
    PLUS            reduce using rule 33 (exp -> termino exp .)
    MINUS           reduce using rule 33 (exp -> termino exp .)
    LEFT_PARENTHESIS reduce using rule 33 (exp -> termino exp .)
    INT             reduce using rule 33 (exp -> termino exp .)
    FLOAT           reduce using rule 33 (exp -> termino exp .)
    RIGHT_PARENTHESIS reduce using rule 33 (exp -> termino exp .)
    SEMICOLON       reduce using rule 33 (exp -> termino exp .)


state 53

    (43) for_op -> PLUS varcte .

    MULTIPLY        reduce using rule 43 (for_op -> PLUS varcte .)
    DIVIDE          reduce using rule 43 (for_op -> PLUS varcte .)


state 54

    (44) for_op -> MINUS varcte .

    MULTIPLY        reduce using rule 44 (for_op -> MINUS varcte .)
    DIVIDE          reduce using rule 44 (for_op -> MINUS varcte .)


state 55

    (36) termino -> factor mult_div .

    PLUS            reduce using rule 36 (termino -> factor mult_div .)
    MINUS           reduce using rule 36 (termino -> factor mult_div .)
    LEFT_PARENTHESIS reduce using rule 36 (termino -> factor mult_div .)
    ID              reduce using rule 36 (termino -> factor mult_div .)
    INT             reduce using rule 36 (termino -> factor mult_div .)
    FLOAT           reduce using rule 36 (termino -> factor mult_div .)


state 56

    (37) mult_div -> MULTIPLY .

    PLUS            reduce using rule 37 (mult_div -> MULTIPLY .)
    MINUS           reduce using rule 37 (mult_div -> MULTIPLY .)
    LEFT_PARENTHESIS reduce using rule 37 (mult_div -> MULTIPLY .)
    ID              reduce using rule 37 (mult_div -> MULTIPLY .)
    INT             reduce using rule 37 (mult_div -> MULTIPLY .)
    FLOAT           reduce using rule 37 (mult_div -> MULTIPLY .)


state 57

    (38) mult_div -> DIVIDE .

    PLUS            reduce using rule 38 (mult_div -> DIVIDE .)
    MINUS           reduce using rule 38 (mult_div -> DIVIDE .)
    LEFT_PARENTHESIS reduce using rule 38 (mult_div -> DIVIDE .)
    ID              reduce using rule 38 (mult_div -> DIVIDE .)
    INT             reduce using rule 38 (mult_div -> DIVIDE .)
    FLOAT           reduce using rule 38 (mult_div -> DIVIDE .)


state 58

    (10) coma -> COMA for_id .

    LEFT_CURLY_BRACKET reduce using rule 10 (coma -> COMA for_id .)


state 59

    (11) colon -> COLON tipo . SEMICOLON var_end

    SEMICOLON       shift and go to state 67


state 60

    (17) tipo -> INT .

    SEMICOLON       reduce using rule 17 (tipo -> INT .)


state 61

    (18) tipo -> FLOAT .

    SEMICOLON       reduce using rule 18 (tipo -> FLOAT .)


state 62

    (22) asignacion -> ID EQUALS expresion . SEMICOLON

    SEMICOLON       shift and go to state 68


state 63

    (23) condicion -> IF LEFT_PARENTHESIS expresion . RIGHT_PARENTHESIS bloque cond_else

    RIGHT_PARENTHESIS shift and go to state 69


state 64

    (42) for_expr -> LEFT_PARENTHESIS expresion RIGHT_PARENTHESIS .

    MULTIPLY        reduce using rule 42 (for_expr -> LEFT_PARENTHESIS expresion RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 42 (for_expr -> LEFT_PARENTHESIS expresion RIGHT_PARENTHESIS .)


state 65

    (26) escritura -> PRINT LEFT_PARENTHESIS escritura . RIGHT_PARENTHESIS SEMICOLON

    RIGHT_PARENTHESIS shift and go to state 70


state 66

    (29) expresion -> exp comparador exp .

    RIGHT_CURLY_BRACKET reduce using rule 29 (expresion -> exp comparador exp .)
    ID              reduce using rule 29 (expresion -> exp comparador exp .)
    IF              reduce using rule 29 (expresion -> exp comparador exp .)
    PRINT           reduce using rule 29 (expresion -> exp comparador exp .)
    STRING          reduce using rule 29 (expresion -> exp comparador exp .)
    PLUS            reduce using rule 29 (expresion -> exp comparador exp .)
    MINUS           reduce using rule 29 (expresion -> exp comparador exp .)
    LEFT_PARENTHESIS reduce using rule 29 (expresion -> exp comparador exp .)
    INT             reduce using rule 29 (expresion -> exp comparador exp .)
    FLOAT           reduce using rule 29 (expresion -> exp comparador exp .)
    RIGHT_PARENTHESIS reduce using rule 29 (expresion -> exp comparador exp .)
    SEMICOLON       reduce using rule 29 (expresion -> exp comparador exp .)


state 67

    (11) colon -> COLON tipo SEMICOLON . var_end
    (12) var_end -> . for_id
    (13) var_end -> . bloque
    (8) for_id -> . ID coma
    (9) for_id -> . ID colon
    (14) bloque -> . LEFT_CURLY_BRACKET info

    ID              shift and go to state 15
    LEFT_CURLY_BRACKET shift and go to state 12

    var_end                        shift and go to state 71
    for_id                         shift and go to state 72
    bloque                         shift and go to state 73

state 68

    (22) asignacion -> ID EQUALS expresion SEMICOLON .

    RIGHT_CURLY_BRACKET reduce using rule 22 (asignacion -> ID EQUALS expresion SEMICOLON .)
    ID              reduce using rule 22 (asignacion -> ID EQUALS expresion SEMICOLON .)
    IF              reduce using rule 22 (asignacion -> ID EQUALS expresion SEMICOLON .)
    PRINT           reduce using rule 22 (asignacion -> ID EQUALS expresion SEMICOLON .)
    STRING          reduce using rule 22 (asignacion -> ID EQUALS expresion SEMICOLON .)
    PLUS            reduce using rule 22 (asignacion -> ID EQUALS expresion SEMICOLON .)
    MINUS           reduce using rule 22 (asignacion -> ID EQUALS expresion SEMICOLON .)
    LEFT_PARENTHESIS reduce using rule 22 (asignacion -> ID EQUALS expresion SEMICOLON .)
    INT             reduce using rule 22 (asignacion -> ID EQUALS expresion SEMICOLON .)
    FLOAT           reduce using rule 22 (asignacion -> ID EQUALS expresion SEMICOLON .)


state 69

    (23) condicion -> IF LEFT_PARENTHESIS expresion RIGHT_PARENTHESIS . bloque cond_else
    (14) bloque -> . LEFT_CURLY_BRACKET info

    LEFT_CURLY_BRACKET shift and go to state 12

    bloque                         shift and go to state 74

state 70

    (26) escritura -> PRINT LEFT_PARENTHESIS escritura RIGHT_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 75


state 71

    (11) colon -> COLON tipo SEMICOLON var_end .

    LEFT_CURLY_BRACKET reduce using rule 11 (colon -> COLON tipo SEMICOLON var_end .)


state 72

    (12) var_end -> for_id .

    LEFT_CURLY_BRACKET reduce using rule 12 (var_end -> for_id .)


state 73

    (13) var_end -> bloque .

    LEFT_CURLY_BRACKET reduce using rule 13 (var_end -> bloque .)


state 74

    (23) condicion -> IF LEFT_PARENTHESIS expresion RIGHT_PARENTHESIS bloque . cond_else
    (24) cond_else -> . SEMICOLON
    (25) cond_else -> . ELSE bloque SEMICOLON

    SEMICOLON       shift and go to state 77
    ELSE            shift and go to state 78

    cond_else                      shift and go to state 76

state 75

    (26) escritura -> PRINT LEFT_PARENTHESIS escritura RIGHT_PARENTHESIS SEMICOLON .

    RIGHT_CURLY_BRACKET reduce using rule 26 (escritura -> PRINT LEFT_PARENTHESIS escritura RIGHT_PARENTHESIS SEMICOLON .)
    ID              reduce using rule 26 (escritura -> PRINT LEFT_PARENTHESIS escritura RIGHT_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 26 (escritura -> PRINT LEFT_PARENTHESIS escritura RIGHT_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 26 (escritura -> PRINT LEFT_PARENTHESIS escritura RIGHT_PARENTHESIS SEMICOLON .)
    STRING          reduce using rule 26 (escritura -> PRINT LEFT_PARENTHESIS escritura RIGHT_PARENTHESIS SEMICOLON .)
    PLUS            reduce using rule 26 (escritura -> PRINT LEFT_PARENTHESIS escritura RIGHT_PARENTHESIS SEMICOLON .)
    MINUS           reduce using rule 26 (escritura -> PRINT LEFT_PARENTHESIS escritura RIGHT_PARENTHESIS SEMICOLON .)
    LEFT_PARENTHESIS reduce using rule 26 (escritura -> PRINT LEFT_PARENTHESIS escritura RIGHT_PARENTHESIS SEMICOLON .)
    INT             reduce using rule 26 (escritura -> PRINT LEFT_PARENTHESIS escritura RIGHT_PARENTHESIS SEMICOLON .)
    FLOAT           reduce using rule 26 (escritura -> PRINT LEFT_PARENTHESIS escritura RIGHT_PARENTHESIS SEMICOLON .)
    RIGHT_PARENTHESIS reduce using rule 26 (escritura -> PRINT LEFT_PARENTHESIS escritura RIGHT_PARENTHESIS SEMICOLON .)


state 76

    (23) condicion -> IF LEFT_PARENTHESIS expresion RIGHT_PARENTHESIS bloque cond_else .

    RIGHT_CURLY_BRACKET reduce using rule 23 (condicion -> IF LEFT_PARENTHESIS expresion RIGHT_PARENTHESIS bloque cond_else .)
    ID              reduce using rule 23 (condicion -> IF LEFT_PARENTHESIS expresion RIGHT_PARENTHESIS bloque cond_else .)
    IF              reduce using rule 23 (condicion -> IF LEFT_PARENTHESIS expresion RIGHT_PARENTHESIS bloque cond_else .)
    PRINT           reduce using rule 23 (condicion -> IF LEFT_PARENTHESIS expresion RIGHT_PARENTHESIS bloque cond_else .)
    STRING          reduce using rule 23 (condicion -> IF LEFT_PARENTHESIS expresion RIGHT_PARENTHESIS bloque cond_else .)
    PLUS            reduce using rule 23 (condicion -> IF LEFT_PARENTHESIS expresion RIGHT_PARENTHESIS bloque cond_else .)
    MINUS           reduce using rule 23 (condicion -> IF LEFT_PARENTHESIS expresion RIGHT_PARENTHESIS bloque cond_else .)
    LEFT_PARENTHESIS reduce using rule 23 (condicion -> IF LEFT_PARENTHESIS expresion RIGHT_PARENTHESIS bloque cond_else .)
    INT             reduce using rule 23 (condicion -> IF LEFT_PARENTHESIS expresion RIGHT_PARENTHESIS bloque cond_else .)
    FLOAT           reduce using rule 23 (condicion -> IF LEFT_PARENTHESIS expresion RIGHT_PARENTHESIS bloque cond_else .)


state 77

    (24) cond_else -> SEMICOLON .

    RIGHT_CURLY_BRACKET reduce using rule 24 (cond_else -> SEMICOLON .)
    ID              reduce using rule 24 (cond_else -> SEMICOLON .)
    IF              reduce using rule 24 (cond_else -> SEMICOLON .)
    PRINT           reduce using rule 24 (cond_else -> SEMICOLON .)
    STRING          reduce using rule 24 (cond_else -> SEMICOLON .)
    PLUS            reduce using rule 24 (cond_else -> SEMICOLON .)
    MINUS           reduce using rule 24 (cond_else -> SEMICOLON .)
    LEFT_PARENTHESIS reduce using rule 24 (cond_else -> SEMICOLON .)
    INT             reduce using rule 24 (cond_else -> SEMICOLON .)
    FLOAT           reduce using rule 24 (cond_else -> SEMICOLON .)


state 78

    (25) cond_else -> ELSE . bloque SEMICOLON
    (14) bloque -> . LEFT_CURLY_BRACKET info

    LEFT_CURLY_BRACKET shift and go to state 12

    bloque                         shift and go to state 79

state 79

    (25) cond_else -> ELSE bloque . SEMICOLON

    SEMICOLON       shift and go to state 80


state 80

    (25) cond_else -> ELSE bloque SEMICOLON .

    RIGHT_CURLY_BRACKET reduce using rule 25 (cond_else -> ELSE bloque SEMICOLON .)
    ID              reduce using rule 25 (cond_else -> ELSE bloque SEMICOLON .)
    IF              reduce using rule 25 (cond_else -> ELSE bloque SEMICOLON .)
    PRINT           reduce using rule 25 (cond_else -> ELSE bloque SEMICOLON .)
    STRING          reduce using rule 25 (cond_else -> ELSE bloque SEMICOLON .)
    PLUS            reduce using rule 25 (cond_else -> ELSE bloque SEMICOLON .)
    MINUS           reduce using rule 25 (cond_else -> ELSE bloque SEMICOLON .)
    LEFT_PARENTHESIS reduce using rule 25 (cond_else -> ELSE bloque SEMICOLON .)
    INT             reduce using rule 25 (cond_else -> ELSE bloque SEMICOLON .)
    FLOAT           reduce using rule 25 (cond_else -> ELSE bloque SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LEFT_CURLY_BRACKET in state 6 resolved as shift
